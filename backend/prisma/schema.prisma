generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

enum UserRoleEnum {
  USER
  EDUCATIONCOORDINATOR
  EDITOR
  ADMIN
}

model UserRole {
  id                  Int                @id @default(autoincrement())
  name                UserRoleEnum       @unique
  rolesOnUsers        UserRolesOnUser[]               
  editRolesOnPages    EditRolesOnPage[]               
}

model UserRolesOnUser {
  user            User              @relation(fields: [username], references: [username], onDelete: Cascade)
  username        String 
  userRole        UserRole          @relation(fields: [role], references: [name], onDelete: Cascade)
  role            UserRoleEnum 
  @@id([username, role])
}

model EditRolesOnPage {
  page            Page              @relation(fields: [pageName, pageId], references: [pageName, id], onDelete: Cascade)
  pageName        String 
  pageId          Int
  userRole        UserRole          @relation(fields: [role], references: [name], onDelete: Cascade)
  role            UserRoleEnum 
  @@id([pageName, pageId, role])
}

model User {
  id              Int                @id @default(autoincrement())
  username        String             @unique
  password        String
  email           String
  roles           UserRolesOnUser[]         
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt @default(now())
  savedSearches   User_SavedSearch[]
  savedInterests  User_SavedInterest[]
}

model User_SavedSearch {
  id            Int                 @id @default(autoincrement())
  searchTerm    String
  parameters    String              @db.Text
  User          User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt @default(now())
}

model User_SavedInterest {
  id                Int    @id @default(autoincrement())
  category          String
  level             String  @default("")
  studyLocation     String  @default("")
  timeInterval      String  
  timeIntervalFrom  String  
  timeIntervalTo    String  
  User              User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt @default(now())
}

model Page {
  id              Int                       @id @default(autoincrement())
  url             String @unique
  pageName        String @unique
  title           String? @default("")
  description     String? @db.Text @default("")
  
  imgSrc          String? @default("")
  imgAlt          String? @default("")
  imgTitle        String? @default("")
  showImgInDesktop Boolean  @default(true)
  showImgInMobile Boolean @default(true)

  // permissions by role
  editRoles       EditRolesOnPage[]
  // PromotionsBlock
  promotionsBlock PromotionsBlock[]           @relation("PromotionsBlock")
  promotedBy      PromotionsBlockPromotions[] @relation("PromotedBy")

  // MapBlock
  mapBlock MapBlock[] @relation("MapBlock")

  // EmployerPromotionsBlock
  employerPromotionsBlock EmployerPromotionsBlock? @relation("EmployerPromotionsBlock", fields: [employerPromotionsBlockId], references: [id])
  employerPromotionsBlockId Int?
  showEmployerPromotionsBlock Boolean @default(false)

  // ImportantDatesBlock
  importantDatesBlock ImportantDatesBlock[] @relation("ImportantDatesBlock")

  // FAQBlock
  faqBlock FaqBlock[] @relation("FaqBlock")

  // LogosBlock
  logosBlock LogosBlock[] @relation("LogosBlock")

  // TableBlock
  tableBlock TableBlock[] @relation("TableBlock")

  // ContactFormBlock
  contactFormBlock ContactFormBlock[] @relation("ContactFormBlock")

  wysiwyg_content	String? @db.Text

  // EducationsRelatedBlock
  showEducationsRelatedBlock Boolean @default(false)
  
  // SearchBlock
  showSearchBlock Boolean @default(false)

  @@unique([id, pageName])
}

model TableBlock {
  id         Int                         @id @default(autoincrement())
  page       Page                        @relation("TableBlock", fields: [pageName, pageId], references: [pageName, id], onDelete: Cascade)
  pageName   String
  pageId     Int
  title      String?                     @default("")
  summary    String?                     @default("") @db.Text
  showBlock  Boolean                     @default(true)
  headers    TableBlockHeader[]          @relation("TableBlockHeader")
  rows       TableBlockRow[]             @relation("TableBlockRow")
  cells      TableBlockCell[]            @relation("TableBlockCells")
  @@unique([id, pageId])
}

model TableBlockHeader {
  id               Int                   @id @default(autoincrement())
  tableBlock       TableBlock            @relation("TableBlockHeader", fields: [tableId, pageId], references: [id, pageId], onDelete: Cascade)
  tableId          Int                  
  pageId           Int                  
  name             String
  cells            TableBlockCell[]      @relation("TableBlockHeader")
  sortable         Boolean               @default(false)
  hidden           Boolean               @default(false)
}

model TableBlockRow {
  id               Int                  @id @default(autoincrement())
  tableBlock       TableBlock           @relation("TableBlockRow", fields: [tableId, pageId], references: [id, pageId], onDelete: Cascade)
  tableId          Int                  
  pageId           Int                  
  cells            TableBlockCell[]     @relation("TableBlockRow")
}

model TableBlockCell {
  id                  Int               @id @default(autoincrement())
  tableBlockHeader    TableBlockHeader  @relation("TableBlockHeader", fields: [headerId], references: [id], onDelete: Cascade)
  headerId            Int
  tableBlockRow       TableBlockRow     @relation("TableBlockRow", fields: [rowId], references: [id], onDelete: Cascade)
  rowId               Int
  tableBlock          TableBlock        @relation("TableBlockCells", fields: [tableId, pageId], references: [id, pageId], onDelete: Cascade)
  pageId              Int
  tableId             Int
  wysiwyg_content     String?           @db.Text
}

model ContactFormBlock {
  id            Int                         @id @default(autoincrement())
  page          Page                        @relation("ContactFormBlock", fields: [pageName, pageId], references: [pageName, id], onDelete: Cascade)
  pageName      String
  pageId        Int
  title         String?                     @default("")
  description   String?                     @default("")  @db.Text
  showBlock     Boolean                     @default(true)
  emails        ContactFormBlockEmails[]    @relation("ContactFormBlockEmails")
  @@unique([id, pageId])
}

model ContactFormBlockEmails {
  id                  Int               @id @default(autoincrement())
  contactFormBlock    ContactFormBlock  @relation("ContactFormBlockEmails", fields: [formId, pageId], references: [id, pageId], onDelete: Cascade)
  pageId              Int
  formId              Int
  label               String
  email               String
}

model PromotionsBlock {
  id         Int                         @id @default(autoincrement())
  page       Page                        @relation("PromotionsBlock", fields: [pageName, pageId], references: [pageName, id], onDelete: Cascade)
  pageName   String
  pageId     Int
  showBlock  Boolean                     @default(true)
  promotions PromotionsBlockPromotions[] @relation("PromotionsBlockPromotions")
  @@unique([id, pageName, pageId])
}

model PromotionsBlockPromotions {
  id               Int             @id @default(autoincrement())
  promotionsBlock  PromotionsBlock @relation("PromotionsBlockPromotions", fields: [blockId, pageName, pageId], references: [id, pageName, pageId], onDelete: Cascade)
  blockId          Int
  pageName         String
  pageId           Int
  promotedPage     Page            @relation("PromotedBy", fields: [promotedPageName, promotedPageId], references: [pageName, id], onDelete: Cascade)
  promotedPageName String
  promotedPageId   Int
}

model EmployerPromotionsBlock {
  id                 Int                                 @id @default(autoincrement())
  page               Page[]                              @relation("EmployerPromotionsBlock")
  showBlock          Boolean                             @default(true)
  title              String
  employerPromotions EmployerPromotionsBlockPromotions[] @relation("EmployerPromotionsBlockPromotions")
  @@unique([id])
}

model EmployerPromotionsBlockPromotions {
  id                      Int                     @id @default(autoincrement())
  employerPromotionsBlock EmployerPromotionsBlock @relation("EmployerPromotionsBlockPromotions", fields: [blockId], references: [id], onDelete: Cascade)
  blockId                 Int
  title                   String?
  ingress                 String?                 @default("") @db.Text
  wysiwyg_content         String?                 @default("") @db.Text
  searchPhrase            String?
}

model MapBlock {
  id         Int     @id @default(autoincrement())
  page       Page    @relation("MapBlock", fields: [pageName, pageId], references: [pageName, id], onDelete: Cascade)
  pageName   String
  pageId     Int
  showBlock  Boolean @default(true)
  title      String
  text       String  @db.Text
  buttonText String? @default("")
}

model ImportantDatesBlock {
  id        Int                            @id @default(autoincrement())
  page      Page                           @relation("ImportantDatesBlock", fields: [pageName, pageId], references: [pageName, id], onDelete: Cascade)
  pageName  String
  pageId    Int
  showBlock Boolean                        @default(true)
  title     String
  dateCards ImportantDatesBlockDateCards[] @relation("ImportantDatesBlockDateCards")

  @@unique([id, pageName, pageId])
}

model ImportantDatesBlockDateCards {
  id                  Int                 @id @default(autoincrement())
  importantDatesBlock ImportantDatesBlock @relation("ImportantDatesBlockDateCards", fields: [blockId, pageName, pageId], references: [id, pageName, pageId], onDelete: Cascade)
  pageName            String
  pageId              Int
  blockId             Int
  date                String
  title               String
  text                String              @db.Text
  url                 String
}

model FaqBlock {
  id          Int                 @id @default(autoincrement())
  page        Page                @relation("FaqBlock", fields: [pageName, pageId], references: [pageName, id], onDelete: Cascade)
  pageName    String
  pageId      Int
  showBlock   Boolean             @default(true)
  title       String
  description String?              @db.Text @default("")
  questions   FaqBlockQuestions[] @relation("FaqBlockQuestions")

  @@unique([id, pageName, pageId])
}

model FaqBlockQuestions {
  id       Int      @id @default(autoincrement())
  faqBlock FaqBlock @relation("FaqBlockQuestions", fields: [blockId, pageName, pageId], references: [id, pageName, pageId], onDelete: Cascade)
  pageName String
  pageId   Int
  blockId  Int
  question String   @db.Text
  answer   String   @db.Text
}

model LogosBlock {
  id          Int               @id @default(autoincrement())
  page        Page              @relation("LogosBlock", fields: [pageName, pageId], references: [pageName, id], onDelete: Cascade)
  pageName    String
  pageId      Int
  title       String
  description String            @db.Text
  showBlock   Boolean           @default(true)
  logos       LogosBlockLogos[] @relation("LogosBlockLogos")

  @@unique([id, pageName, pageId])
}

model LogosBlockLogos {
  id         Int        @id @default(autoincrement())
  logosBlock LogosBlock @relation("LogosBlockLogos", fields: [blockId, pageName, pageId], references: [id, pageName, pageId], onDelete: Cascade)
  blockId    Int
  pageName   String
  pageId     Int
  alt        String
  filename   String     @default("")
}

model Footer {
  id           Int    @id @default(autoincrement())
  contactTitle String
  contactText  String @db.Text
}

model Media {
  id        Int      @id @default(autoincrement())
  title     String
  filename  String
  alt       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  src       String
}
